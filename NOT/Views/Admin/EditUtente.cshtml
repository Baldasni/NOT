@model NOT.Models.EditUtenteViewModel
@{ Layout = "~/Views/Shared/_Layout.cshtml"; }
@{ ViewBag.Title = "Edit Utente"; }

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>EditUtenteViewModel</h4>
    <hr />
    <div class="form-group">
        @Html.DisplayNameFor(model => model.UserId)
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>
    @{
        var roleList = NOT.Helper.EnumHelper<NOT.Models.RuoloEnum>
            .GetValues(NOT.Models.RuoloEnum.Admin); /*Enum.GetValues(typeof(NOT.Models.Ruolo));*/

        List<SelectListItem>
            listItems = new List<SelectListItem>
                ();

        foreach (NOT.Models.RuoloEnum role in roleList)
        {
            if (role >= (User.IsInRole("Admin") ? NOT.Models.RuoloEnum.Admin : NOT.Models.RuoloEnum.Manager))
            {
                listItems.Add(new SelectListItem
                {
                    Text = NOT.Helper.EnumHelper<NOT.Models.RuoloEnum>
                    .GetDisplayValue(role),
                    //Text = role.ToString(),
                    Value = role.ToString()
                });
            }
        }
                }
    <div class="form-group">
        @Html.LabelFor(model => model.Ruolo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.Ruolo, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownListFor(model => model.Ruolo, listItems, "-- Select Status --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Ruolo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default btn-outline-primary" />
        </div>
    </div>
</div>
 }

<div>
    @Html.ActionLink("Back to Lista Utenti", "ListaUtenti", "Admin")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

